{
	"info": {
		"_postman_id": "3a7c24ef-59ae-453f-ac02-cd632d14b93d",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13169755"
	},
	"item": [
		{
			"name": "vuelo",
			"item": [
				{
					"name": "Flights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/flights",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Flight By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/flights/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Filter  By Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/flights/searchByDateAndPlace?date=2024-11-15&origin=GuatemalaCity&destination=Murcia",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights",
								"searchByDateAndPlace"
							],
							"query": [
								{
									"key": "date",
									"value": "2024-11-15"
								},
								{
									"key": "origin",
									"value": "GuatemalaCity"
								},
								{
									"key": "destination",
									"value": "Murcia"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"flightNumber\": \"001\",\n    \"name\": \"Iberia\",\n    \"date\": \"2024-02-20\",\n    \"origin\": \"Buenos Aires\",\n    \"destination\": \"Madrid\",\n    \"seatType\": \"business\",\n    \"price\": 700.0,\n    \"userList\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/flights/edit/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights",
								"edit",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/flights/delete/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights",
								"delete",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Add Reservation",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"date\": \"2024-02-20\",\r\n        \"destination\": \"Madrid\",\r\n        \"flightNumber\": \"001\",\r\n        \"name\": \"Iberia\",\r\n        \"origin\": \"Buenos Aires\",\r\n        \"price\": \"700\",\r\n        \"seatType\": \"business\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Alice\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-03-15\",\r\n        \"destination\": \"Barcelona\",\r\n        \"flightNumber\": \"002\",\r\n        \"name\": \"Vueling\",\r\n        \"origin\": \"Sao Paulo\",\r\n        \"price\": \"550\",\r\n        \"seatType\": \"economy\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Kim\"\r\n            },\r\n            {\r\n                \"name\": \"Liam\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-10\",\r\n        \"destination\": \"Sevilla\",\r\n        \"flightNumber\": \"003\",\r\n        \"name\": \"Air Europa\",\r\n        \"origin\": \"Lima\",\r\n        \"price\": \"800\",\r\n        \"seatType\": \"first_class\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Noah\"\r\n            },\r\n            {\r\n                \"name\": \"Olivia\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-05-05\",\r\n        \"destination\": \"Valencia\",\r\n        \"flightNumber\": \"004\",\r\n        \"name\": \"LATAM\",\r\n        \"origin\": \"Mexico City\",\r\n        \"price\": \"600\",\r\n        \"seatType\": \"tourist\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Rachel\"\r\n            },\r\n            {\r\n                \"name\": \"Sam\"\r\n            },\r\n            {\r\n                \"name\": \"Tom\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-06-20\",\r\n        \"destination\": \"Bilbao\",\r\n        \"flightNumber\": \"005\",\r\n        \"name\": \"Iberia\",\r\n        \"origin\": \"Chile\",\r\n        \"price\": \"750\",\r\n        \"seatType\": \"business\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Jeiny\"\r\n            },\r\n            {\r\n                \"name\": \"Jule\"\r\n            },\r\n            {\r\n                \"name\": \"Bonnie\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-07-15\",\r\n        \"destination\": \"Malaga\",\r\n        \"flightNumber\": \"006\",\r\n        \"name\": \"Vueling\",\r\n        \"origin\": \"Quito\",\r\n        \"price\": \"580\",\r\n        \"seatType\": \"economy\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Ender\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-08-10\",\r\n        \"destination\": \"Alicante\",\r\n        \"flightNumber\": \"007\",\r\n        \"name\": \"Air Europa\",\r\n        \"origin\": \"Caracas\",\r\n        \"price\": \"820\",\r\n        \"seatType\": \"first_class\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Archibald\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-09-05\",\r\n        \"destination\": \"Zaragoza\",\r\n        \"flightNumber\": \"008\",\r\n        \"name\": \"LATAM\",\r\n        \"origin\": \"Santiago\",\r\n        \"price\": \"610\",\r\n        \"seatType\": \"tourist\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"mip\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-10-20\",\r\n        \"destination\": \"Granada\",\r\n        \"flightNumber\": \"009\",\r\n        \"name\": \"Iberia\",\r\n        \"origin\": \"Montevideo\",\r\n        \"price\": \"770\",\r\n        \"seatType\": \"business\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Yara\"\r\n            },\r\n            {\r\n                \"name\": \"Zane\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-11-15\",\r\n        \"destination\": \"Murcia\",\r\n        \"flightNumber\": \"010\",\r\n        \"name\": \"Vueling\",\r\n        \"origin\": \"GuatemalaCity\",\r\n        \"price\": \"590\",\r\n        \"seatType\": \"economy\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Frank\"\r\n            },\r\n            {\r\n                \"name\": \"Grace\"\r\n            }\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/flights/new",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"flights",
								"new"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hotel",
			"item": [
				{
					"name": "Hotels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/hotels",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Hotel By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/hotels/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Filter  By Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/agency/hotels/searchByDateAndCity?dateFrom=2024-02-20&dateTo=2024-02-24&city=Madrid",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels",
								"searchByDateAndCity"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "2024-02-20"
								},
								{
									"key": "dateTo",
									"value": "2024-02-24"
								},
								{
									"key": "city",
									"value": "Madrid"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hotelCode\": \"LV01\",\n    \"name\": \"LuxuryPalace\",\n    \"city\": \"Madrid\",\n    \"dateFrom\": \"2024-02-20\",\n    \"dateTo\": \"2024-02-24\",\n    \"roomType\": 1.0,\n    \"price\": 120.0,\n    \"nights\": 4,\n    \"userList\": [],\n    \"booked\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/hotels/edit/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels",
								"edit",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/hotels/delete/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels",
								"delete",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Add Reservation",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"city\": \"Madrid\",\r\n        \"dateFrom\": \"2024-02-20\",\r\n        \"dateTo\": \"2024-02-24\",\r\n        \"hotelCode\": \"LV01\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Luxury Palace\",\r\n        \"nights\": 0,\r\n        \"price\": 120,\r\n        \"roomType\": \"1\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Alice\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Barcelona\",\r\n        \"dateFrom\": \"2024-03-15\",\r\n        \"dateTo\": \"2024-03-20\",\r\n        \"hotelCode\": \"LV02\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Sunset View Hotel\",\r\n        \"nights\": 0,\r\n        \"price\": 90,\r\n        \"roomType\": \"2\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Kim\"\r\n            },\r\n            {\r\n                \"name\": \"Liam\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Sevilla\",\r\n        \"dateFrom\": \"2024-04-10\",\r\n        \"dateTo\": \"2024-04-15\",\r\n        \"hotelCode\": \"LV03\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Andalusian Dreams\",\r\n        \"nights\": 0,\r\n        \"price\": 150,\r\n        \"roomType\": \"3\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Noah\"\r\n            },\r\n            {\r\n                \"name\": \"Olivia\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Valencia\",\r\n        \"dateFrom\": \"2024-05-05\",\r\n        \"dateTo\": \"2024-05-10\",\r\n        \"hotelCode\": \"LV04\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Coastal Retreat\",\r\n        \"nights\": 0,\r\n        \"price\": 80,\r\n        \"roomType\": \"1\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Rachel\"\r\n            },\r\n            {\r\n                \"name\": \"Sam\"\r\n            },\r\n            {\r\n                \"name\": \"Tom\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Bilbao\",\r\n        \"dateFrom\": \"2024-06-20\",\r\n        \"dateTo\": \"2024-06-25\",\r\n        \"hotelCode\": \"LV05\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Modern Elegance\",\r\n        \"nights\": 0,\r\n        \"price\": 110,\r\n        \"roomType\": \"2\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Jeiny\"\r\n            },\r\n            {\r\n                \"name\": \"Jule\"\r\n            },\r\n            {\r\n                \"name\": \"Bonnie\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Malaga\",\r\n        \"dateFrom\": \"2024-07-15\",\r\n        \"dateTo\": \"2024-07-20\",\r\n        \"hotelCode\": \"LV06\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Mediterranean Bliss\",\r\n        \"nights\": 0,\r\n        \"price\": 95,\r\n        \"roomType\": \"3\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Ender\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Alicante\",\r\n        \"dateFrom\": \"2024-08-10\",\r\n        \"dateTo\": \"2024-08-15\",\r\n        \"hotelCode\": \"LV07\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Royal Oasis\",\r\n        \"nights\": 0,\r\n        \"price\": 130,\r\n        \"roomType\": \"1\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Archibald\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Zaragoza\",\r\n        \"dateFrom\": \"2024-09-05\",\r\n        \"dateTo\": \"2024-09-10\",\r\n        \"hotelCode\": \"LV08\",\r\n        \"isBooked\": false,\r\n        \"name\": \"City Views Inn\",\r\n        \"nights\": 0,\r\n        \"price\": 85,\r\n        \"roomType\": \"2\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Mip\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Granada\",\r\n        \"dateFrom\": \"2024-10-20\",\r\n        \"dateTo\": \"2024-10-25\",\r\n        \"hotelCode\": \"LV09\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Historic Retreat\",\r\n        \"nights\": 0,\r\n        \"price\": 140,\r\n        \"roomType\": \"3\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Yara\"\r\n            },\r\n            {\r\n                \"name\": \"Zane\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"city\": \"Murcia\",\r\n        \"dateFrom\": \"2024-11-15\",\r\n        \"dateTo\": \"2024-11-20\",\r\n        \"hotelCode\": \"LV10\",\r\n        \"isBooked\": false,\r\n        \"name\": \"Sunny Courtyard\",\r\n        \"nights\": 0,\r\n        \"price\": 100,\r\n        \"roomType\": \"1\",\r\n        \"userList\": [\r\n            {\r\n                \"name\": \"Frank\"\r\n            },\r\n            {\r\n                \"name\": \"Grace\"\r\n            }\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/agency/hotels/new",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"agency",
								"hotels",
								"new"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}